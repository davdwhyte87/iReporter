{"version":3,"sources":["../../../Api/controllers/record.js"],"names":["validate","method","check","body","exists","isLength","min","isString","isInt","CreateId","id","Math","floor","random","create","req","res","errorFormatter","location","msg","param","value","nestedErrors","errors","validationResult","formatWith","isEmpty","console","log","array","status","json","error","onlyFirstError","record","Record","title","type","comment","created_on","Date","created_by","image","DbRecord","push","data","GetAll","GetSingle","RecordId","parseInt","params","map"],"mappings":"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","file":"record.js","sourcesContent":["import check from 'express-validator/check';\r\nimport { Record, DbRecord } from '../models/Record';\r\n\r\nconst validate=(method) => {\r\n    switch (method) {\r\n        case 'create': {\r\n            return [\r\n                check.body('title', 'a valid title is needed').exists(),\r\n                check.body('title', 'Title is too short, at least 5 characters').isLength({ min: 5 }),\r\n                check.body('comment', 'a valid comment is required').exists().isLength({ min: 5 }),\r\n                check.body('type', 'You need to selected a type').exists().isString(),\r\n                check.body('comment', 'You need to add a valid comment (At least 300 characters)')\r\n                .exists().isString().isLength({ min: 3 }),\r\n                check.body('created_by', 'User Id is needed').exists().isInt(),\r\n                check.body('status', 'A defualt status is required').exists().isString(),\r\n            ];\r\n        }\r\n        default: {\r\n            return [];\r\n        }\r\n    }\r\n};\r\n\r\nconst CreateId=() => {\r\n    let id =Math.floor(Math.random()*90000000000) + 100000000000;\r\n    return id;\r\n};\r\nconst create=(req, res) => {\r\n    const errorFormatter = ({ location, msg, param, value, nestedErrors }) => {\r\n        return msg;\r\n      };\r\n    let errors=check.validationResult(req).formatWith(errorFormatter);\r\n    if (!errors.isEmpty()) {\r\n        console.log(errors.array(true));\r\n        return res.status(404).json({ status: 404, error: errors.array({ onlyFirstError: true }) });\r\n    }\r\n    let record=Record;\r\n    record.title=req.body.title;\r\n    record.type=req.body.type;\r\n    record.id= CreateId();\r\n    record.comment= req.body.comment;\r\n    record.created_on= new Date();\r\n    record.created_by= req.body.created_by;\r\n    record.image= req.body.image;\r\n    record.location= req.body.location;\r\n    record.status= req.body.status;\r\n    DbRecord.push(record);\r\n    return res.status(200).json({ status: 200, data: record });\r\n};\r\n\r\nconst GetAll=(req, res) => {\r\n    return res.status(200).json({ status: 200, data: DbRecord });\r\n};\r\n\r\nconst GetSingle=(req, res) => {\r\n    const RecordId=parseInt(req.params.id, 10);\r\n    DbRecord.map((record) => {\r\n        if (record.id===RecordId) {\r\n            return res.status(200).json({ status: 200, data: record });\r\n        }\r\n    });\r\n    return res.status(404).json({ status: 404, error: 'Data not found' });\r\n};\r\n\r\nexport { validate, create, GetAll, GetSingle };\r\n"]}