{"version":3,"sources":["../../../api/controllers/record.js"],"names":["validate","method","check","body","exists","isLength","min","isString","isInt","createId","id","Math","floor","random","create","req","res","errorFormatter","location","msg","param","value","nestedErrors","errors","validationResult","formatWith","isEmpty","status","json","error","array","onlyFirstError","record","Record","title","type","comment","created_on","Date","created_by","image","DbRecord","push","data","getAll","getSingle","RecordId","parseInt","params","RecordData","map","updateRecord","recordIndex","originalRecord","index","updateRecordData","splice","message","deleteRecord","recordId","recordData","originalRecordId"],"mappings":"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","file":"record.js","sourcesContent":["import check from 'express-validator/check';\r\nimport { Record, DbRecord } from '../models/Record';\r\n\r\nconst validate=(method) => {\r\n    switch (method) {\r\n        case 'create': {\r\n            return [\r\n                check.body('title', 'a valid title is needed').exists(),\r\n                check.body('title', 'Title is too short, at least 5 characters').isLength({ min: 5 }),\r\n                check.body('comment', 'a valid comment is required').exists().isLength({ min: 5 }),\r\n                check.body('type', 'You need to selected a type').exists().isString(),\r\n                check.body('comment', 'You need to add a valid comment (At least 300 characters)')\r\n                .exists().isString().isLength({ min: 3 }),\r\n                check.body('created_by', 'User Id is needed').exists().isInt(),\r\n                check.body('status', 'A defualt status is required').exists().isString(),\r\n            ];\r\n        }\r\n        case 'update': {\r\n            return [\r\n                check.body('title', 'a valid title is needed').exists(),\r\n                check.body('title', 'Title is too short, at least 5 characters').isLength({ min: 5 }),\r\n                check.body('comment', 'a valid comment is required').exists().isLength({ min: 5 }),\r\n                check.body('type', 'You need to selected a type').exists().isString(),\r\n                check.body('comment', 'You need to add a valid comment (At least 300 characters)')\r\n                .exists().isString().isLength({ min: 3 }),\r\n                check.body('created_by', 'User Id is needed').exists().isInt(),\r\n                check.body('status', 'A defualt status is required').exists().isString(),\r\n                check.body('location', 'Location is not valid').isString(),\r\n            ];\r\n        }\r\n        default: {\r\n            return [];\r\n        }\r\n    }\r\n};\r\n\r\nconst createId=() => {\r\n    const id =Math.floor(Math.random()*90000000000) + 100000000000;\r\n    return id;\r\n};\r\nconst create=(req, res) => {\r\n    const errorFormatter = ({ location, msg, param, value, nestedErrors }) => {\r\n        return msg;\r\n      };\r\n    const errors=check.validationResult(req).formatWith(errorFormatter);\r\n    if (!errors.isEmpty()) {\r\n        return res.status(404).json({ status: 404, error: errors.array({ onlyFirstError: true }) });\r\n    }\r\n    const record=Record;\r\n    record.title=req.body.title;\r\n    record.type=req.body.type;\r\n    record.id= createId();\r\n    record.comment= req.body.comment;\r\n    record.created_on= new Date();\r\n    record.created_by= req.body.created_by;\r\n    record.image= req.body.image;\r\n    record.location= req.body.location;\r\n    record.status= req.body.status;\r\n    DbRecord.push(record);\r\n    return res.status(200).json({ status: 200, data: record });\r\n};\r\n\r\nconst getAll=(req, res) => {\r\n    return res.status(200).json({ status: 200, data: DbRecord });\r\n};\r\n\r\nconst getSingle=(req, res) => {\r\n    const RecordId=parseInt(req.params.id, 10);\r\n    let RecordData;\r\n    DbRecord.map((record) => {\r\n        if (record.id===RecordId) {\r\n            RecordData=record;\r\n            return res.status(200).json({ status: 200, data: record });\r\n        }\r\n    });\r\n    if (!RecordData) {\r\n        return res.status(404).json({ status: 404, error: 'Data not found' });\r\n    }\r\n    return res.status(404).json({ status: 404, error: 'An error occurred' });\r\n};\r\n\r\nconst updateRecord=(req, res) => {\r\n    let recordIndex;\r\n    let originalRecord;\r\n    const RecordId=parseInt(req.params.id, 10);\r\n    DbRecord.map((record, index) => {\r\n        if (record.id===RecordId) {\r\n            originalRecord=record;\r\n            recordIndex=index;\r\n        }\r\n    });\r\n    if (!originalRecord) {\r\n        return res.status(404).json({ status: 404, error: 'Record not found' });\r\n    }\r\n    const updateRecordData=Record;\r\n    updateRecordData.title=req.body.title || originalRecord.title;\r\n    updateRecordData.type=req.body.type || originalRecord.type;\r\n    updateRecordData.id= originalRecord.id;\r\n    updateRecordData.comment= req.body.comment || originalRecord.comment;\r\n    updateRecordData.created_on= originalRecord.created_on;\r\n    updateRecordData.created_by= originalRecord.created_by;\r\n    updateRecordData.image= req.body.image || originalRecord.image;\r\n    updateRecordData.location= req.body.location || originalRecord.location;\r\n    updateRecordData.status= req.body.status || originalRecord.status;\r\n    DbRecord.splice(recordIndex, 1, updateRecordData);\r\n\r\n    return res.status(200).json({ status: 200, data: [{ id: updateRecordData.id, message: 'Updated Record' }] });\r\n};\r\n\r\nconst deleteRecord = (req, res) => {\r\n    const recordId=parseInt(req.params.id, 10);\r\n    let recordData;\r\n    let originalRecordId;\r\n    DbRecord.map((record, index) => {\r\n        if (record.id===recordId) {\r\n            recordData=record;\r\n            originalRecordId=recordData.id;\r\n            DbRecord.splice(index, 1);\r\n            return res.status(200).json({ status: 200, data: [{ id: originalRecordId, message: 'Record deleted' }] });\r\n        }\r\n    });\r\n    if (!recordData) {\r\n        return res.status(404).json({ status: 404, error: 'Data not found' });\r\n    }\r\n    return res.status(404).json({ status: 404, error: 'An error occurred' });\r\n};\r\n\r\nexport { validate, create, getAll, getSingle, updateRecord, deleteRecord };\r\n"]}