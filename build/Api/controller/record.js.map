{"version":3,"sources":["../../../Api/controller/record.js"],"names":["validate","method","check","body","exists","isLength","min","create","req","res","errorFormatter","location","msg","param","value","nestedErrors","errors","validationResult","formatWith","isEmpty","status","json","error","array","x","data"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,WAAS,SAATA,QAAS,CAACC,MAAD,EAAY;AACvB,YAAQA,MAAR;AACI,aAAK,QAAL;AAAe;AACX,uBAAO,CACHC,gBAAMC,IAAN,CAAW,OAAX,EAAoB,yBAApB,EAA+CC,MAA/C,GAAwDC,QAAxD,CAAiE,EAAEC,KAAK,CAAP,EAAjE,CADG,EAEHJ,gBAAMC,IAAN,CAAW,SAAX,EAAsB,6BAAtB,EAAqDC,MAArD,GAA8DC,QAA9D,CAAuE,EAAEC,KAAK,CAAP,EAAvE,CAFG,EAGHJ,gBAAMC,IAAN,CAAW,MAAX,EAAmB,6BAAnB,EAAkDC,MAAlD,EAHG,CAAP;AAKH;AACD;AAAS;AACL,uBAAO,EAAP;AACH;AAVL;AAYH,CAbD;AAcA,IAAMG,SAAO,SAAPA,MAAO,CAACC,GAAD,EAAMC,GAAN,EAAc;AACvB,QAAMC,iBAAiB,SAAjBA,cAAiB,OAAmD;AAAA,YAAhDC,QAAgD,QAAhDA,QAAgD;AAAA,YAAtCC,GAAsC,QAAtCA,GAAsC;AAAA,YAAjCC,KAAiC,QAAjCA,KAAiC;AAAA,YAA1BC,KAA0B,QAA1BA,KAA0B;AAAA,YAAnBC,YAAmB,QAAnBA,YAAmB;;AACtE,eAAOH,GAAP;AACD,KAFH;AAGA,QAAII,SAAOd,gBAAMe,gBAAN,CAAuBT,GAAvB,EAA4BU,UAA5B,CAAuCR,cAAvC,CAAX;AACA,QAAI,CAACM,OAAOG,OAAP,EAAL,EAAuB;AACnB,eAAOV,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,GAAV,EAAeE,OAAON,OAAOO,KAAP,EAAtB,EAArB,CAAP;AACH;AACD,QAAIC,IAAE,GAAN;AACA,WAAOf,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAED,QAAQ,GAAV,EAAeK,MAAM,CAACD,CAAD,CAArB,EAArB,CAAP;AACH,CAVD;QAWSxB,Q,GAAAA,Q;QAAUO,M,GAAAA,M","file":"record.js","sourcesContent":["import check from 'express-validator/check';\r\n\r\nconst validate=(method) => {\r\n    switch (method) {\r\n        case 'create': {\r\n            return [\r\n                check.body('title', 'a valid title is needed').exists().isLength({ min: 5 }),\r\n                check.body('comment', 'a valid comment is required').exists().isLength({ min: 5 }),\r\n                check.body('type', 'You need to selected a type').exists(),\r\n            ];\r\n        }\r\n        default: {\r\n            return [];\r\n        }\r\n    }\r\n};\r\nconst create=(req, res) => {\r\n    const errorFormatter = ({ location, msg, param, value, nestedErrors }) => {\r\n        return msg;\r\n      };\r\n    let errors=check.validationResult(req).formatWith(errorFormatter);\r\n    if (!errors.isEmpty()) {\r\n        return res.status(404).json({ status: 404, error: errors.array() });\r\n    }\r\n    let x='k';\r\n    return res.status(200).json({ status: 200, data: [x] });\r\n};\r\nexport { validate, create };\r\n"]}